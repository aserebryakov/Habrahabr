<h4>Vim FileStyle: проверяем открытый файл на соответствие настройкам Vim</h4>


<h3>Зачем это нужно</h3>

При командной разработке важным является соблюдение определенного кодинг
стандарта. Речь не всегда идет об именовании переменных, функций и т.д.
Перечисленное выше во многом вопрос опыта и умения формулировать
мысли в тексте. Как театр начинается с вешалки, так и кодинг стандарт
начинается с определения следующих вещей:

1. Пробелы или табуляция
2. Длина строки

Несоблюдение приведенных выше параметров стиля *разными* людьми в пределах
одного файла ведет с следующим проблемам:

1. Изрезанность кода
2. Необходимость горизонтального скроллинга

Часто, такие проблемы возникают из-за того, что новый человек, вошедший
в проект не настроил редактор корректно и это остается незамеченным
вплоть до того момента как становится нужно сравнить разные версии
одного и того же файла.

Чтобы сразу при открытии файла видеть подобные проблемы, я написал
небольшой плагин.

<habracut>


<h3>Почему именно плагин</h3>

На это было несколько причин.

Первая - я уже 2 года на постоянной основе пользуюсь Vim для редактирования
кода и мне давно хотелось написать какой-нибудь плагин.

Вторая - использование стандартных настроек вроде `listchars` не дает
подсветки в случае использования пробелов для отступов при опции `noexpandtab`.

Третья - задание зависимости от настроек в `ftplugin`.


<h3>Функционал</h3>

1. Подсветка пробельных символов в соответствии с опцией `expandtab`: если 
   опция включена, то символы табуляции подсвечиваются красным, в противном
   случае пробелы в начале строки подсвечиваются желтым
2. Подсветка пробельных символов в конце строки
3. Подсветка части строки превышающей длину, заданную опцией `textwidth`


<h3>Плагин изнутри</h3>

В основе плагина лежит функция <code>matchadd()</code>. Эта функция
ищет в открытом буффере совпадения с заданным паттерном и подсвечивает его
в соответствии с указанной схемой подсветки. Например, мы хотим подсветить
все пробелы в буффере желтым:

<code>

:highligh Spaces ctermbg=Yellow guibg=Yellow
:call matchadd('Spaces', '\s\+')

</code>


Общая же функция подсветки выглядит следующим образом:

<code>

function FileStyleHighlightPattern(highlight)
  call matchadd(a:highlight['highlight'], a:highlight['pattern'])
endfunction

</code>

На вход принимается словарь с именем схемы подсветки и паттерном для сравнения.

Для того, чтобы плагин автоматически запускал проверку паттернов необходимо
было добавить автоматические команды при инициализации плагина:

<code>

  augroup filestyle_auto_commands
    autocmd!
    autocmd BufReadPost,BufNewFile * call FileStyleActivate()
    autocmd FileType * call FileStyleCheckFiletype()
    autocmd WinEnter * call FileStyleCheck()
  augroup end

</code>

Стоит отдельно оговорить для чего нужен обработчик события <code>FileType</code>.
Его пришлось добавить для того, чтобы плагин не отрабатывал на <code>help</code>
файлах, так как их содержимое может быть произвольным и никак не согласовываться
с текущими настройками а так же не может быть отредактировано из окна помощи.

</habracut>

