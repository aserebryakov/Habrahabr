<h4>Vim FileStyle: проверяем открытый файл на соответствие настройкам Vim</h4>


<h3><b>Зачем это нужно</b></h3>
При командной разработке важным является соблюдение определенного кодинг стандарта. Речь не всегда идет об именовании переменных, функций и т.д. Перечисленное выше во многом вопрос опыта и умения формулировать мысли в тексте. Кодинг стандарт часто начинается с определения следующих вещей:
<ul>
	<li>Пробелы или табуляция</li>
	<li>Длина строки</li>
</ul>
Несоблюдение приведенных выше параметров стиля <i>разными</i> людьми в пределах одного файла ведет с следующим проблемам:
<ul>
	<li>Изрезанность кода</li>
	<li>Необходимость горизонтального скроллинга</li>
</ul>
Часто такие проблемы возникают из-за того, что новый человек, вошедший в проект, не настроил редактор корректно, и это остается незамеченным вплоть до того момента, как становится нужно сравнить разные версии одного и того же файла.  <img src="//habrastorage.org/files/13e/f9f/7cd/13ef9f7cdac74689991ef6d713ffc100.png" align="right"/>

Чтобы сразу при открытии файла видеть подобные проблемы, я написал небольшой плагин.

<habracut>

<h3><b>Почему именно плагин</b></h3>
На это было несколько причин:
<ol>
	<li>Я уже почти 2 года на постоянной основе пользуюсь Vim для редактирования кода, и мне давно хотелось написать какой-нибудь плагин</li>
	<li>Использование стандартных настроек вроде <code>listchars</code> не дает подсветки в случае использования пробелов для отступов при опции <code>noexpandtab</code></li>
	<li>Задание зависимости от настроек в <code>ftplugin</code></li>
</ol>

<h3><b>Функционал</b></h3>
<ul>
	<li>Подсветка пробельных символов в соответствии с опцией <code>expandtab</code>: если опция включена, то символы табуляции подсвечиваются красным, в противном случае пробелы в начале строки подсвечиваются желтым</li>
	<li>Подсветка пробельных символов в конце строки</li>
	<li>Подсветка части строки превышающей длину, заданную опцией <code>textwidth</code></li>
</ul>

<h3><b>Плагин изнутри</b></h3>
В основе плагина лежит функция <code>matchadd()</code>. Эта функция ищет в открытом буфере совпадения с заданным паттерном и подсвечивает его в соответствии с указанной схемой подсветки.

Например, мы хотим подсветить все пробелы в буфере желтым:
<source>
:highligh Spaces ctermbg=Yellow guibg=Yellow
:call matchadd('Spaces', '\s\+')
</source>

Общая функция подсветки выглядит следующим образом:

<source>
function FileStyleHighlightPattern(highlight)
  call matchadd(a:highlight['highlight'], a:highlight['pattern'])
endfunction
</source>
На вход принимается словарь с именем схемы подсветки и паттерном для сравнения.

Для того, чтобы плагин автоматически запускал проверку паттернов, необходимо было добавить автоматические команды при инициализации плагина:

<source>
augroup filestyle_auto_commands
  autocmd!
  autocmd BufReadPost,BufNewFile * call FileStyleActivate()
  autocmd FileType * call FileStyleCheckFiletype()
  autocmd WinEnter * call FileStyleCheck()
augroup end
</source>

Стоит отдельно оговорить, для чего нужен обработчик события <code>FileType</code>. Его пришлось добавить для того, чтобы плагин не отрабатывал на <code>help</code> файлах, так как их содержимое может быть произвольным и никак не согласовываться с текущими настройками, а так же не может быть отредактировано из окна помощи.

Обработчик <code>WinEnter</code> нужен для того, чтобы при делении окна (<code>:split</code>) в открытом окне так же была подсветка.

Так выглядит конечный результат:
<img src="//habrastorage.org/files/253/f7a/750/253f7a750277476b8f4e5aaaf4f95bb9.png"/>

Скачать можно по ссылкам:
<a href="http://www.vim.org/scripts/script.php?script_id=5065">vim.org</a>
<a href="https://github.com/aserebryakov/filestyle">GitHub</a>

</habracut>

